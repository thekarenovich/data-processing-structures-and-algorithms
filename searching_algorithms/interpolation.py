# Интерполяционный поиск — это еще один алгоритм «разделяй и властвуй», аналогичный бинарному поиску. 
# В отличие от бинарного поиска, он не всегда начинает поиск с середины. 
# Если у нас большое количество элементов и наш индекс не может быть вычислен за одну итерацию, то мы продолжаем пересчитывать значение индекса после корректировки значений high и low.
# Временная сложность интерполяционного поиска равна O(log log n), когда значения распределены равномерно. 
# Если значения распределены неравномерно, временная сложность для наихудшего случая равна O(n) — так же, как и для линейного поиска.
# Интерполяционный поиск лучше всего работает на равномерно распределенных, отсортированных массивах. 
# В то время как бинарный поиск начинает поиск с середины и всегда делит массив на две части, интерполяционный поиск вычисляет вероятную позицию элемента и проверяет индекс, что повышает вероятность нахождения элемента за меньшее количество итераций.

def interpolationSearch(lys, val):
    low = 0
    high = (len(lys) - 1)
    while low <= high and val >= lys[low] and val <= lys[high]:
        index = low + int(((float(high - low) / ( lys[high] - lys[low])) * ( val - lys[low])))
        if lys[index] == val:
            return index
        if lys[index] < val:
            low = index + 1;
        else:
            high = index - 1;
    return -1
    
print(interpolationSearch([1,2,3,4,5,6,7,8], 6))
#________________________________________________
'''
5
'''
